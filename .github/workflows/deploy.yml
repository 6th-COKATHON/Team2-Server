name: Deploy to EC2 via SSH

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # --- 1. 소스 코드 체크아웃 ---
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- 2. Java 및 Gradle 환경 설정 및 캐싱 ---
      - name: Set up JDK 21 and Gradle Cache
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      # --- 3. Spring Boot 설정 파일 생성 ---
      - name: Create application-prod.yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_PROD }}" | base64 --decode > ./src/main/resources/application-prod.yml

      # --- 4. Gradle로 애플리케이션 빌드 ---
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      # --- 5. Docker 이미지 빌드 및 Docker Hub에 푸시 ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/cokathon-6:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- 6. SSH를 통해 EC2 서버에 배포 ---
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_PEM_KEY }}
          port: 22
          script: |
            IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/cokathon-6:latest
            CONTAINER_NAME=cokathon-6

            # Docker Hub에서 최신 이미지를 가져옵니다.
            docker pull $IMAGE_NAME

            # 기존 컨테이너가 있으면 중지하고 삭제합니다.
            if [ $(docker ps -a -q -f name=^/${CONTAINER_NAME}$) ]; then
                docker stop $CONTAINER_NAME
                docker rm $CONTAINER_NAME
            fi

            # 새 컨테이너를 실행합니다.
            docker run -d \
              --name $CONTAINER_NAME \
              -p 8080:8080 \
              --restart always \
              $IMAGE_NAME